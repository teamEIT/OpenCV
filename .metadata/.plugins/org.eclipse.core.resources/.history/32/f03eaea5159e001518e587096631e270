// Read image, format to gray, hsv, cymk
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/core/core.hpp"
#include "opencv2/opencv.hpp"
#include "opencv2/imgproc/imgproc.hpp"


#include <iostream>
#include <string>

using namespace std;
using namespace cv;

int main(int argc, char** argv)	{

	cout << "The first program." << endl;
	string imageName("logo.png");
	string windowName("Read image");

	if(argc > 1) {
		imageName = argv[1];
	}

	Mat image = imread(imageName.c_str(), CV_LOAD_IMAGE_COLOR); // IMREAD_COLOR: Read the image.
	if(image.empty()) { // Check for invalid input
		cout << "Could not open or find the image" << endl;
		return -1;
	}
	namedWindow(windowName.c_str(), CV_WINDOW_AUTOSIZE); // Create a window for display.
	imshow(windowName.c_str(), image); // Show our image inside it.

	// Gray image
	Mat grayImage; // Create a gray image.
	string grayImageName = ("logoGray.png");
	string windowName2("Gray image");

	cvtColor(image, grayImage, CV_BGR2GRAY); // convert RGB to gray
	imwrite(grayImageName, grayImage); // Save the gray image

	namedWindow(windowName2.c_str(), CV_WINDOW_AUTOSIZE);
	imshow(windowName2.c_str(), grayImage);

	// hsv image
	Mat hsvImage; // Create a gray image.
	string hsvImageName = ("logoHSV.png");
	string windowName3("HSV image");

	cvtColor(image, hsvImage, COLOR_BGR2HSV); // convert RGB to hsv
	imwrite(hsvImageName, hsvImage); // Save the gray image

	namedWindow(windowName3.c_str(), CV_WINDOW_AUTOSIZE);
	imshow(windowName3.c_str(), hsvImage);

	// hsv image
	Mat ycrcbImage; // Create a gray image.
	string ycrcbImageName = ("logoCMYK.png");
	string windowName4("CMYK image");

	cvtColor(image, ycrcbImage, CV_BGR2YCrCb); // convert RGB to cmyk
	imwrite(ycrcbImageName, ycrcbImage); // Save the gray image

	namedWindow(windowName4.c_str(), CV_WINDOW_AUTOSIZE);
	imshow(windowName4.c_str(), ycrcbImage);

	waitKey(0);
	return 0;
}
